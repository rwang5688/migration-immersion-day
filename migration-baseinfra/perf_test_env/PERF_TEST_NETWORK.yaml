AWSTemplateFormatVersion: 2010-09-09
Description: 'VPC template for the AWS Migration Immersion Day - Source Environment '

#Parameters
Parameters:
  DomainName:
    Description: >-
      The fully qualified name for the source VPC, such as perftest.env. The
      name doesn't need to be publicly resolvable; it will resolve inside your
      VPC only.
    Type: String
    MinLength: '5'
    MaxLength: '16'
    Default: perftest.env
  AWSRegionArch2AMI:
    Description: The latest AMI ID for Amazon Linux
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs
  DNSandVPNInstanceType:
    Description: DNS and VPN EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    ConstraintDescription: must be a valid EC2 instance type.


#Resources
Resources:
  #Create source and target VPC, subnets, routing tables and VPC peering between source and target network
  #source part
  VPCSource:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Environment
          Value: Source
        - Key: Name
          Value: Source
  SubnetSourcePublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPCSource
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: 192.168.0.0/24
      Tags:
        - Key: Environment
          Value: Source
        - Key: Name
          Value: SourcePublic
  SubnetSourcePrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPCSource
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: 192.168.1.0/24
      Tags:
        - Key: Environment
          Value: Source
        - Key: Name
          Value: SourcePrivate
  InternetGatewaySource:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Environment
          Value: Source
        - Key: Name
          Value: Source
  AttachGatewaySource:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPCSource
      InternetGatewayId: !Ref InternetGatewaySource
  RouteTableSourcePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPCSource
      Tags:
        - Key: Environment
          Value: Source
        - Key: Name
          Value: Source_Public
  RouteTableSourcePrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPCSource
      Tags:
        - Key: Environment
          Value: Source
        - Key: Name
          Value: Source_Private
  RouteSourcePublic:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGatewaySource
    Properties:
      RouteTableId: !Ref RouteTableSourcePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewaySource
  RouteSourcePrivate:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTableSourcePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT
  SubnetRouteTableAssociationSourcePublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetSourcePublic
      RouteTableId: !Ref RouteTableSourcePublic
  SubnetRouteTableAssociationSourcePrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetSourcePrivate
      RouteTableId: !Ref RouteTableSourcePrivate
  NetworkAclSource:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPCSource
      Tags:
        - Key: Environment
          Value: Source
        - Key: Name
          Value: Source
  InboundNetworkAclEntrySource:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclSource
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  OutBoundNetworkAclEntrySource:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclSource
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  SubnetNetworkAclAssociationSourcePublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetSourcePublic
      NetworkAclId: !Ref NetworkAclSource
  SubnetNetworkAclAssociationSourcePrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetSourcePrivate
      NetworkAclId: !Ref NetworkAclSource
  myDhcpOptions:
    Type: 'AWS::EC2::DHCPOptions'
    Properties:
      DomainName: !Ref DomainName
      DomainNameServers:
        - 192.168.1.250
      Tags:
        - Key: Name
          Value: Source
  myVPCDHCPOptionsAssociation:
    DependsOn: DNSandVPNServer
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties:
      VpcId: !Ref VPCSource
      DhcpOptionsId: !Ref myDhcpOptions
  NAT:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - EIP
        - AllocationId
      SubnetId: !Ref SubnetSourcePublic
      Tags:
        - Key: Environment
          Value: Source
        - Key: Name
          Value: Source
  EIP:
    DependsOn: AttachGatewaySource
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: VPCSource
  DNSandVPNSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPCSource
      GroupDescription: Enable DNS access via port 53
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 192.168.0.0/16
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 192.168.0.0/16
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 192.168.0.0/16
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.0.0.0/16
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.0.0.0/16
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 10.0.0.0/16

  #Target part
  VPCTarget:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Environment
          Value: Target
        - Key: Name
          Value: Target
  SubnetTargetPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPCTarget
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Environment
          Value: Target
        - Key: Name
          Value: TargetPublic
  SubnetTargetPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPCTarget
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Environment
          Value: Target
        - Key: Name
          Value: TargetPrivate
  SubnetTargetAurora:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPCTarget
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Environment
          Value: Target
        - Key: Name
          Value: TargetAurora
  InternetGatewayTarget:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Environment
          Value: Target
        - Key: Name
          Value: Target
  AttachGatewayTarget:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPCTarget
      InternetGatewayId: !Ref InternetGatewayTarget
  RouteTableTargetPublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPCTarget
      Tags:
        - Key: Environment
          Value: Target
        - Key: Name
          Value: Target_Public
  RouteTableTargetPrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPCTarget
      Tags:
        - Key: Environment
          Value: Target
        - Key: Name
          Value: Target_Private
  RouteTargetPublic:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGatewayTarget
    Properties:
      RouteTableId: !Ref RouteTableTargetPublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayTarget
  RouteTargetPrivate:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTableTargetPrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATT
  SubnetRouteTableAssociationTargetPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetTargetPublic
      RouteTableId: !Ref RouteTableTargetPublic
  SubnetRouteTableAssociationTargetPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetTargetPrivate
      RouteTableId: !Ref RouteTableTargetPrivate
  NetworkAclTarget:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPCTarget
      Tags:
        - Key: Environment
          Value: Target
        - Key: Name
          Value: Target
  InboundNetworkAclEntryTarget:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclTarget
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  OutBoundNetworkAclEntryTarget:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclTarget
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  SubnetNetworkAclAssociationTargetPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetTargetPublic
      NetworkAclId: !Ref NetworkAclTarget
  SubnetNetworkAclAssociationTargetPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetTargetPrivate
      NetworkAclId: !Ref NetworkAclTarget
  myVPCDHCPOptionsAssociationT:
    DependsOn: DNSandVPNServer
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties:
      VpcId: !Ref VPCTarget
      DhcpOptionsId: !Ref myDhcpOptions
  NATT:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - EIPT
        - AllocationId
      SubnetId: !Ref SubnetTargetPublic
      Tags:
        - Key: Environment
          Value: Target
        - Key: Name
          Value: Target
  EIPT:
    DependsOn: AttachGatewayTarget
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: VPCTarget
  myVPCPeeringConnection:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Properties:
      VpcId: !Ref VPCSource
      PeerVpcId: !Ref VPCTarget
  PeeringRouteSource:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 10.0.0.0/16
      RouteTableId: !Ref RouteTableSourcePrivate
      VpcPeeringConnectionId: !Ref myVPCPeeringConnection
  PeeringRouteTarget:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 192.168.0.0/16
      RouteTableId: !Ref RouteTableTargetPrivate
      VpcPeeringConnectionId: !Ref myVPCPeeringConnection
  PeeringRouteSourcePublic:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 10.0.0.0/16
      RouteTableId: !Ref RouteTableSourcePublic
      VpcPeeringConnectionId: !Ref myVPCPeeringConnection
  PeeringRouteTargetPublic:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 192.168.0.0/16
      RouteTableId: !Ref RouteTableTargetPublic
      VpcPeeringConnectionId: !Ref myVPCPeeringConnection
  TargetSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPCTarget
      GroupDescription: Access to resources within the same VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1
          ToPort: 65535
          CidrIp: 10.0.0.0/16
        - IpProtocol: udp
          FromPort: 1
          ToPort: 65535
          CidrIp: 10.0.0.0/16
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: 1
          ToPort: 65535
          CidrIp: 192.168.0.0/16
        - IpProtocol: udp
          FromPort: 1
          ToPort: 65535
          CidrIp: 192.168.0.0/16
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 192.168.0.0/16
  TargetSecurityGroupTest:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPCTarget
      GroupDescription: Access to resources within the same VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 10.0.0.0/16
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 192.168.0.0/16
      SecurityGroupEgress:
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 127.0.0.1/32
  
  #create a DNS server (linux w/ bind). same server also has a openswan VPN that can be used to stablish the endpoints.
  DNSandVPNServer:
    Type: 'AWS::EC2::Instance'
    DependsOn: NAT
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          dns_and_vpn_install:
            - install_cfn
            - install_dns
            - configure_dns
            - traffic_generator
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                    [cfn-auto-reloader-hook]                  
                    triggers=post.update
                    path=Resources.DNSandVPNServer.Metadata.AWS::CloudFormation::Init
                    action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource DNSandVPNServer --configsets dns_and_vpn_install --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_dns:
          packages:
            yum:
              bind: []
          files:
            /var/named/dynamic/source.zone:
              content: !Sub | 
                    $TTL 2  ; 2 seconds 
                    ${DomainName}. IN SOA  dns.${DomainName}. postmaster.${DomainName}. ( 
                          2019010101 ; serial
                          28800      ; refresh (8 hours)
                          1800       ; retry (30 minutes)
                          604800     ; expire (1 week)
                          86400      ; minimum (1 day)
                          )
                       NS      dns.${DomainName}.
                    dns IN A 192.168.1.250
              mode: '000440'
              owner: named
              group: named

            /var/named/dynamic/reverse10.zone:
              content: !Sub | 
                    $TTL 2  ; 2 seconds 
                    @ IN SOA  dns.${DomainName}. postmaster.${DomainName}. ( 
                          2019010101 ; serial
                          28800      ; refresh (8 hours)
                          1800       ; retry (30 minutes)
                          604800     ; expire (1 week)
                          86400      ; minimum (1 day)
                          )
                       NS      dns.${DomainName}.
              mode: '000440'
              owner: named
              group: named
            
            /var/named/dynamic/reverse192.zone:
              content: !Sub | 
                    $TTL 2  ; 2 seconds 
                    @ IN SOA  dns.${DomainName}. postmaster.${DomainName}. ( 
                          2019010101 ; serial
                          28800      ; refresh (8 hours)
                          1800       ; retry (30 minutes)
                          604800     ; expire (1 week)
                          86400      ; minimum (1 day)
                          )
                       NS      dns.${DomainName}.
                    250.1 IN PTR dns.${DomainName}.
              mode: '000440'
              owner: named
              group: named

            /tmp/zone.conf:
              content: !Sub |
                  zone "${DomainName}" IN {
                      type master;
                      file "dynamic/source.zone";
                      allow-update { 127.0.0.1; 192.168.0.0/16; 10.0.0.0/16; };
                      notify no;
                  };
                  zone 0.10.in-addr.arpa IN {
                      type master;
                      file "dynamic/reverse10.zone";
                      allow-update { 127.0.0.1; 192.168.0.0/16; 10.0.0.0/16; };
                      notify no;
                  };
                  zone 168.192.in-addr.arpa IN {
                      type master;
                      file "dynamic/reverse192.zone";
                      allow-update { 127.0.0.1; 192.168.0.0/16; 10.0.0.0/16; };
                      notify no;
                  };
              mode: '000400'
              owner: root
              group: root
            /tmp/config-ddns.sh:
              content: !Sub | 
                  #!/bin/bash -xe
                  sed -i "s/127.0.0.1;/any;/g" /etc/named.conf
                  sed -i "s/localhost;/any;/g" /etc/named.conf
                  sed -i "s/dnssec-enable yes;/dnssec-enable no;/g" /etc/named.conf
                  sed -i "s/dnssec-validation yes;/dnssec-validation no;/g" /etc/named.conf
                  cat /tmp/zone.conf >> /etc/named.conf
                  systemctl restart named
              mode: '000500'
              owner: root
              group: root
          services:
            sysvinit:
              named:
                enabled: 'true'
                ensureRunning: 'true'
        configure_dns:
          commands:
            /tmp/config-ddns.sh:
              command: /bin/bash /tmp/config-ddns.sh
        traffic_generator:
          packages:
            yum:
              httpd-tools: []
          files:
            /etc/cron.d/traffic_generator:
              content: !Sub | 
                  #Run the traffic generator
                  SHELL=/bin/bash
                  PATH=/sbin:/bin:/usr/sbin:/usr/bin
                  MAILTO=root
                  */2 * * * * root ab -n 5 -c 2 http://wordpress-web.perftest.env/
                  */2 * * * * root ab -n 5 -c 2 https://ofbiz-web.perftest.env:8443/accounting/control/main
                  */3 * * * * root curl -k http://wordpress-web.perftest.env/
                  */3 * * * * root curl -k https://ofbiz-web.perftest.env:8443/accounting/control/main
                  */2 * * * * root wget --no-check-certificate https://ofbiz-web.perftest.env:8443/accounting/control/main -O /tmp/main.tmp
                  */2 * * * * root printf 'GET /accounting/control/main HTTP/1.1\r\nHost: ofbiz-web\r\n\r\n' | ncat --ssl ofbiz-web 8443
              mode: '000644'
              owner: root
              group: root
    Properties:
      ImageId: !Ref AWSRegionArch2AMI
      InstanceType: !Ref DNSandVPNInstanceType
      Tags:
        - Key: Environment
          Value: Source
        - Key: Name
          Value: DO-NOT-TOUCH(DNS)
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: false
          PrivateIpAddress: 192.168.1.250
          SubnetId: !Ref SubnetSourcePrivate
          GroupSet:
            - !Ref DNSandVPNSecurityGroup
      UserData: 
        Fn::Base64:
         !Sub | 
            #!/bin/bash -xe
            hostnamectl set-hostname dns.${DomainName}
            while ! yum update -y ; do sleep 1; done
            while ! yum install nc -y ; do sleep 1; done
            while ! yum update -y aws-cfn-bootstrap ; do sleep 1; done
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource DNSandVPNServer --configsets dns_and_vpn_install --region ${AWS::Region} 
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource DNSandVPNServer --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M

#Outputs
Outputs:
  VPCSource:
    Description: The VPC ID to use for the resources in the Source OnPrem Environment
    Value: !Ref VPCSource
    Export:
      Name: 'MID-VPCSource'
  SubnetSourcePublic:
    Description: The subnet ID to use for public servers in the Source Source Environment
    Value: !Ref SubnetSourcePublic
    Export:
      Name: 'MID-SubnetSourcePublic'
  SubnetSourcePrivate:
    Description: The subnet ID to use for private servers in the Source Source Environment
    Value: !Ref SubnetSourcePrivate
    Export:
      Name: 'MID-SubnetSourcePrivate'
  VPCTarget:
    Description: The VPC ID to use for the resources in the Source OnPrem Environment
    Value: !Ref VPCTarget
    Export:
      Name: 'MID-VPCTarget'
  SubnetTargetPublic:
    Description: The subnet ID to use for public servers in the Target Source Environment
    Value: !Ref SubnetTargetPublic
    Export:
      Name: 'MID-SubnetTargetPublic'
  SubnetTargetPrivate:
    Description: The subnet ID to use for private servers in the Target Source Environment
    Value: !Ref SubnetTargetPrivate
    Export:
      Name: 'MID-SubnetTargetPrivate'
  TargetSecurityGroup:
    Description: The target security group ID to use for private servers in the Target Environment
    Value: !Ref TargetSecurityGroup
    Export:
      Name: 'MID-TargetSecurityGroup'
  TargetSecurityGroupTest:
    Description: >-
      The target security group ID to use for private servers in the Target
      Environment for test launch
    Value: !Ref TargetSecurityGroupTest
    Export:
      Name: 'MID-TargetSecurityGroupTest'